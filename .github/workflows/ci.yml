name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  DJANGO_VERSION: '5.1.1'

permissions:
  contents: read
  security-events: write

jobs:
  # Linting and Code Quality
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety
      
      - name: Run Black (code formatting)
        run: |
          black --check --diff .
      
      - name: Run isort (import sorting)
        run: |
          isort --check-only --diff .
      
      - name: Run Flake8 (linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      - name: Run Bandit (security)
        run: |
          bandit -r . -f json -o bandit-report.json || true
      
      - name: Run Safety (dependency security)
        run: |
          safety check --json --output safety-report.json || true

  # Testing
  test:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: Expense_Tracker_Project.settings_simple
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: expense_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Create environment file
        run: |
          cp env.example .env
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/expense_tracker_test" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DEBUG=True" >> .env
      
      - name: Run database migrations
        run: |
          python manage.py migrate --noinput
      
      - name: Run tests with coverage
        run: |
          python -m pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --tb=short
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: |
          github.event_name != 'pull_request' ||
          (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Image
  docker:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t expense-tracker:latest .
      
      - name: Test Docker image
        run: |
          docker run --rm expense-tracker:latest python -c "import django; print('Django version:', django.get_version())"
      
      - name: Run container tests
        run: |
          docker compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from app
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1

  # Deploy to Staging (if on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # This could be deploying to a staging server, Vercel preview, etc.

  # Deploy to Production (if on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # This could be deploying to Vercel, DigitalOcean, etc.

  # Notify on failure
  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "One or more jobs failed. Check the logs for details."
          # Add your notification logic here (Slack, email, etc.)
